面试准备20190723
1.lambda函数（入函数），匿名函数
在需要一个函数，但又不想费神去命名一个函数的时候
如：a = lambda x,y : x+y
a(3,11)
如：
>>> foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
>>>
>>> print filter(lambda x: x % 3 == 0, foo)
[18, 9, 24, 12, 27]
>>>
>>> print map(lambda x: x * 2 + 10, foo)
[14, 46, 28, 54, 44, 58, 26, 34, 64]
>>>
>>> print reduce(lambda x, y: x + y, foo)
139

lambda的使用大量简化了代码，使代码简练清晰。但是值得注意的是，这会在一定程度上降低代码的可读性。如果不是非常熟悉python的人或许会对此感到不可理解。
lambda 定义了一个匿名函数
　　lambda 并不会带来程序运行效率的提高，只会使代码更简洁。
　　如果可以使用for...in...if来完成的，坚决不用lambda。
　　如果使用lambda，lambda内不要包含循环，如果有，我宁愿定义函数来完成，使代码获得可重用性和更好的可读性。

2.list：［］
tuple : ( )
如何实现tuple和list的转换？直接使用list（）和tuple（）函数就可以
c = [1,2,3]
tuple(c)
3. 请写出一python代码实现删除一个list中的重复元素
方法一：使用set函数，set（list1）
方法二：使用字典函数
例如：a = [6,8,1,2,3,4,5,2,5]
      b = {}
      b = b.fromkeys(a)
      c = list(b. keys())
     c = list(b)
      print(c)
python里面的字典函数fromkeys（）用于创建一个新字典，以序列seq中元素做字典的键值，value为字典所有键对应的初始值
或者：
a = [6,8,1,2,3,4,5,2,5]
b ={}
b =b.fromkeys(a).keys()
c = list(b)
print(c)
方法三：自己写一个方法遍历然后判断
a = [6,8,1,2,3,4,5,2,5]
b = []
for i in range(len(a)):
    if a[i] in b:
        pass
    else:
        b.append(a[i])
print(b)

4.tuple不能增加元素，没有append()和extend()方法
不能删除元素，没有remove()和pop()方法，但是可以用in来查看一个元素是否在tuple中
tuple是一个不可变的list，tuple比list操作速度快，如果定义了一个值的常量集，并且唯一要用它做不断的遍历，则用tuple代替list
（1）c.append(0) 将元素0添加到列表的末尾
（2）insert：将单个元素插入到list中
如：c.insert(0,7)在第一个位置插入7
（3）extend：用来连接list，如d.extend(c)
（4）pop：删除list最后一个元素，然后返回删除元素的值
（5）“+”可以将两个list连接，相当于extend()

5. python将多个list合并成一个list
（1）用+号，例如 L3=L1 + L2
（2）用extend方法，如 L1.extend(L2)
（3）使用切片，如 L1[len(L1):len(L1)] = L2
6.装饰器的实际使用
（1）装饰器是Python语言中的高级语法。主要的功能是对一个函数、方法、或者类进行加工，作用是为已经存在的对象添加额外的功能，提升代码的可读性。
装饰器是设计模式的一种，被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等
当前Python的装饰器语法如下： 
@dec2 
@dec1 
def func(arg1, arg2, ...): 
.... 
return funx 
上面的代码相当于： 
def func(arg1, arg2, ...): 
pass 
func = dec2(dec1(func))
（2）@在这里增加了一个函数，这个函数接收一个函数对象作为参数，这样就不需要修改原来的函数，达到原来稳定并且测试通过的代码不作任何修改，减少出错的风险，特别已经上线运行的系统，更是如此；或者像8代单传的代码，没有人敢去修改它
#python 3.6
#定义一个新的函数
def printStar(func):
    print('*************************************')
    return func()
 
@printStar
def add():    
    return 1 + 1
 
def sub():    
    return 2 -1 
print(add)
print(printStar(sub))
print(add)

--------------------- 
输出结果如下：
*************************************
2
*************************************
1
2
只能调用一次，第二次就失效了，到这里，可以发现使用嵌套函数来实现，就可以返回一个可调用的对象，这样更加完美了。
#python 3.6
#定义一个新的函数
def printStar(func):
    def f():
        print('*************************************')
        return func()
    return f
 
@printStar
def add():    
    return 1 + 1
 
@printStar
def sub():    
    return 2 -1
    
print(add()) 
print(sub())
print(add())
--------------------- 
输出结果如下：
*************************************
2
*************************************
1
*************************************
2
由此可见@printStar是一个语法改变，它的目标就是实现不修改原来函数的代码，又可以复用原来的函数并且作出修改，也称作为元编程，并且装饰器函数可以复用，实现共享的目标。


